<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on GUAN-BLOG</title>
    <link>https://academia-hugo.netlify.com/notes/</link>
    <description>Recent content in Notes on GUAN-BLOG</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://academia-hugo.netlify.com/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>prometheus监控学习</title>
      <link>https://academia-hugo.netlify.com/notes/prometheus/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/prometheus/</guid>
      <description>&lt;h2 id=&#34;官网-httpsprometheusiohttpsprometheusio&#34;&gt;官网 &lt;a href=&#34;https://prometheus.io/&#34;&gt;https://prometheus.io/&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>spring-cloud-Alibaba</title>
      <link>https://academia-hugo.netlify.com/notes/cloud-albaba/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/cloud-albaba/</guid>
      <description>&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud-alibaba&#34;&gt;spring-cloud-alibaba&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md&#34;&gt;中文文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;spring-cloud-alibaba&#34;&gt;Spring Cloud Alibaba&lt;/h1&gt;
&lt;p&gt;Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。&lt;/p&gt;
&lt;p&gt;依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。&lt;/p&gt;
&lt;p&gt;参考文档 请查看 &lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/wiki&#34;&gt;WIKI&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;为 Spring Cloud Alibaba 贡献代码请参考 &lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/wiki/%E5%A6%82%E4%BD%95%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81&#34;&gt;如何贡献&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;主要功能&#34;&gt;主要功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务限流降级&lt;/strong&gt;：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务注册与发现&lt;/strong&gt;：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式配置管理&lt;/strong&gt;：支持分布式系统中的外部化配置，配置更改时自动刷新。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息驱动能力&lt;/strong&gt;：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式事务&lt;/strong&gt;：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阿里云对象存储&lt;/strong&gt;：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式任务调度&lt;/strong&gt;：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阿里云短信服务&lt;/strong&gt;：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多功能请参考 &lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/Roadmap-zh.md&#34;&gt;Roadmap&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;组件&#34;&gt;组件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/alibaba/Sentinel&#34;&gt;Sentinel&lt;/a&gt;&lt;/strong&gt;：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/alibaba/Nacos&#34;&gt;Nacos&lt;/a&gt;&lt;/strong&gt;：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://rocketmq.apache.org/&#34;&gt;RocketMQ&lt;/a&gt;&lt;/strong&gt;：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/apache/dubbo&#34;&gt;Dubbo&lt;/a&gt;&lt;/strong&gt;：Apache Dubbo™ 是一款高性能 Java RPC 框架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/seata/seata&#34;&gt;Seata&lt;/a&gt;&lt;/strong&gt;：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.aliyun.com/product/acm&#34;&gt;Alibaba Cloud ACM&lt;/a&gt;&lt;/strong&gt;：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.aliyun.com/product/oss&#34;&gt;Alibaba Cloud OSS&lt;/a&gt;&lt;/strong&gt;: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/43136.html&#34;&gt;Alibaba Cloud SchedulerX&lt;/a&gt;&lt;/strong&gt;: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.aliyun.com/product/sms&#34;&gt;Alibaba Cloud SMS&lt;/a&gt;&lt;/strong&gt;: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。&lt;/p&gt;
&lt;p&gt;更多组件请参考 &lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/Roadmap-zh.md&#34;&gt;Roadmap&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何构建&#34;&gt;如何构建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;master 分支对应的是 Spring Cloud Greenwich，最低支持 JDK 1.8。&lt;/li&gt;
&lt;li&gt;finchley 分支对应的是 Spring Cloud Finchley，最低支持 JDK 1.8。&lt;/li&gt;
&lt;li&gt;1.x 分支对应的是 Spring Cloud Edgware，最低支持 JDK 1.7。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Cloud 使用 Maven 来构建，最快的使用方式是将本项目 clone 到本地，然后执行以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./mvnw install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完毕后，项目将被安装到本地 Maven 仓库。&lt;/p&gt;
&lt;h2 id=&#34;如何使用&#34;&gt;如何使用&lt;/h2&gt;
&lt;h3 id=&#34;如何引入依赖&#34;&gt;如何引入依赖&lt;/h3&gt;
&lt;p&gt;如果需要使用已发布的版本，在 &lt;code&gt;dependencyManagement&lt;/code&gt; 中添加如下配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependencyManagement&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在 &lt;code&gt;dependencies&lt;/code&gt; 中添加自己所需使用的依赖即可使用。&lt;/p&gt;
&lt;h2 id=&#34;演示-demo&#34;&gt;演示 Demo&lt;/h2&gt;
&lt;p&gt;为了演示如何使用，Spring Cloud Alibaba 项目包含了一个子模块&lt;code&gt;spring-cloud-alibaba-examples&lt;/code&gt;。此模块中提供了演示用的 example ，您可以阅读对应的 example 工程下的 readme 文档，根据里面的步骤来体验。&lt;/p&gt;
&lt;p&gt;Example 列表：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples/sentinel-example/sentinel-core-example/readme-zh.md&#34;&gt;Sentinel Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md&#34;&gt;Nacos Config Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/readme-zh.md&#34;&gt;Nacos Discovery Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/rocketmq-example/readme-zh.md&#34;&gt;RocketMQ Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/seata-example/readme-zh.md&#34;&gt;Seata Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/oss-example/readme-zh.md&#34;&gt;Alibaba Cloud OSS Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/ans-example/ans-provider-example/readme-zh.md&#34;&gt;Alibaba Cloud ANS Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/acm-example/acm-local-example/readme-zh.md&#34;&gt;Alibaba Cloud ACM Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/schedulerx-example/schedulerx-simple-task-example/readme-zh.md&#34;&gt;Alibaba Cloud SchedulerX Example&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;版本管理规范&#34;&gt;版本管理规范&lt;/h2&gt;
&lt;p&gt;项目的版本号格式为 x.x.x 的形式，其中 x 的数值类型为数字，从 0 开始取值，且不限于 0~9 这个范围。项目处于孵化器阶段时，第一位版本号固定使用 0，即版本号为 0.x.x 的格式。&lt;/p&gt;
&lt;p&gt;由于 Spring Boot 1 和 Spring Boot 2 在 Actuator 模块的接口和注解有很大的变更，且 spring-cloud-commons 从 1.x.x 版本升级到 2.0.0 版本也有较大的变更，因此我们采取跟 SpringBoot 版本号一致的版本:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.5.x 版本适用于 Spring Boot 1.5.x&lt;/li&gt;
&lt;li&gt;2.0.x 版本适用于 Spring Boot 2.0.x&lt;/li&gt;
&lt;li&gt;2.1.x 版本适用于 Spring Boot 2.1.x&lt;/li&gt;
&lt;li&gt;2.2.x 版本适用于 Spring Boot 2.2.x&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SpringCloud微服务学习</title>
      <link>https://academia-hugo.netlify.com/notes/cloud-study/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/cloud-study/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://academia-hugo.netlify.com/img/springCloud/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud-alibaba&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jenkins持续集成</title>
      <link>https://academia-hugo.netlify.com/notes/jenkins-study/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/jenkins-study/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://academia-hugo.netlify.com/img/jenkins/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h1&gt;
&lt;p&gt;官网：https://www.jenkins.io/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build great things at any scale&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PaaS平台即服务</title>
      <link>https://academia-hugo.netlify.com/notes/paas-study/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/paas-study/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://academia-hugo.netlify.com/img/paas/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;PaaS是（Platform as a Service）的缩写，是指&lt;a href=&#34;https://baike.baidu.com/item/%E5%B9%B3%E5%8F%B0%E5%8D%B3%E6%9C%8D%E5%8A%A1/4329761&#34;&gt;平台即服务&lt;/a&gt;。 把&lt;a href=&#34;https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571&#34;&gt;服务器&lt;/a&gt;平台作为一种服务提供的商业模式，通过网络进行程序提供的服务称之为SaaS(Software as a Service)，而&lt;a href=&#34;https://baike.baidu.com/item/%E4%BA%91%E8%AE%A1%E7%AE%97&#34;&gt;云计算&lt;/a&gt;时代相应的服务器平台或者开发环境作为服务进行提供就成为了PaaS(Platform as a Service)。&lt;/p&gt;
&lt;p&gt;所谓PaaS实际上是指将&lt;a href=&#34;https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6&#34;&gt;软件&lt;/a&gt;研发的平台作为一种服务，以&lt;a href=&#34;https://baike.baidu.com/item/SaaS&#34;&gt;SaaS&lt;/a&gt;的模式提交给用户。因此，PaaS也是&lt;a href=&#34;https://baike.baidu.com/item/SaaS&#34;&gt;SaaS&lt;/a&gt;模式的一种应用。但是，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。在2007年国内外SaaS厂商先后推出自己的PAAS平台。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>spring&#43;shiro&#43;thymeleaf用户登录授权</title>
      <link>https://academia-hugo.netlify.com/notes/spring-shiro-thymeleaf/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/spring-shiro-thymeleaf/</guid>
      <description>&lt;h2 id=&#34;shiro安全框架&#34;&gt;shiro安全框架&lt;/h2&gt;
&lt;p&gt;官方开发文档：http://shiro.apache.org/architecture.html&lt;/p&gt;
&lt;h2 id=&#34;apache-shiro-architecture&#34;&gt;Apache Shiro Architecture&lt;/h2&gt;
&lt;p&gt;Apache Shiro’s design goals are to simplify application security by being intuitive and easy to use. Shiro’s core design models how most people think about application security - in the context of someone (or something) interacting with an application.&lt;/p&gt;
&lt;p&gt;Software applications are usually designed based on user stories. That is, you’ll often design user interfaces or service APIs based on how a user would (or should) interact with the software. For example, you might say, “If the user interacting with my application is logged in, I will show them a button they can click to view their account information. If they are not logged in, I will show a sign-up button.”&lt;/p&gt;
&lt;p&gt;This example statement indicates that applications are largely written to satisfy user requirements and needs. Even if the ‘user’ is another software system and not a human being, you still write code to reflect behavior based on who (or what) is currently interacting with your software.&lt;/p&gt;
&lt;p&gt;Shiro reflects these concepts in its own design. By matching what is already intuitive for software developers, Apache Shiro remains intuitive and easy to use in practically any application.&lt;/p&gt;
&lt;h3 id=&#34;high-level-overview&#34;&gt;High-Level Overview&lt;/h3&gt;
&lt;p&gt;At the highest conceptual level, Shiro’s architecture has 3 primary concepts: the &lt;code&gt;Subject&lt;/code&gt;, &lt;code&gt;SecurityManager&lt;/code&gt; and &lt;code&gt;Realms&lt;/code&gt;. The following diagram is a high-level overview of how these components interact, and we’ll cover each concept below:
&lt;img src=&#34;https://academia-hugo.netlify.com/img/shiro/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;** Subject: As we’ve mentioned in our Tutorial, the Subject is essentially a security specific ‘view’ of the the currently executing user. Whereas the word ‘User’ often implies a human being, a Subject can be a person, but it could also represent a 3rd-party service, daemon account, cron job, or anything similar - basically anything that is currently interacting with the software.**
Subject instances are all bound to (and require) a SecurityManager. When you interact with a Subject, those interactions translate to subject-specific interactions with the SecurityManager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** SecurityManager: The SecurityManager is the heart of Shiro’s architecture and acts as a sort of ’umbrella’ object that coordinates its internal security components that together form an object graph. However, once the SecurityManager and its internal object graph is configured for an application, it is usually left alone and application developers spend almost all of their time with the Subject API.**&lt;/p&gt;
&lt;p&gt;We will talk about the SecurityManager in detail later on, but it is important to realize that when you interact with a Subject, it is really the SecurityManager behind the scenes that does all the heavy lifting for any Subject security operation. This is reflected in the basic flow diagram above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** Realms: Realms act as the ‘bridge’ or ‘connector’ between Shiro and your application’s security data. When it comes time to actually interact with security-related data like user accounts to perform authentication (login) and authorization (access control), Shiro looks up many of these things from one or more Realms configured for an application.:**&lt;/p&gt;
&lt;p&gt;In this sense a Realm is essentially a security-specific DAO: it encapsulates connection details for data sources and makes the associated data available to Shiro as needed. When configuring Shiro, you must specify at least one Realm to use for authentication and/or authorization. The SecurityManager may be configured with multiple Realms, but at least one is required.&lt;/p&gt;
&lt;p&gt;Shiro provides out-of-the-box Realms to connect to a number of security data sources (aka directories) such as LDAP, relational databases (JDBC), text configuration sources like INI and properties files, and more. You can plug-in your own Realm implementations to represent custom data sources if the default Realms do not meet your needs.&lt;/p&gt;
&lt;p&gt;Like other internal components, the Shiro SecurityManager manages how Realms are used to acquire security and identity data to be represented as Subject instances.&lt;/p&gt;
&lt;p&gt;Detailed Architecture
The following diagram shows Shiro’s core architectural concepts followed by short summaries of each&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;detailed-architecture&#34;&gt;Detailed Architecture&lt;/h2&gt;
&lt;p&gt;The following diagram shows Shiro’s core architectural concepts followed by short summaries of each:
&lt;img src=&#34;https://academia-hugo.netlify.com/img/shiro/2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://academia-hugo.netlify.com/img/shiro/6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://academia-hugo.netlify.com/img/shiro/7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>背景</title>
      <link>https://academia-hugo.netlify.com/notes/linux-study/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/linux-study/</guid>
      <description>&lt;h3 id=&#34;简史&#34;&gt;简史&lt;/h3&gt;
&lt;p&gt;Linux操作系统的诞生、发展和成长过程始终依赖着五个重要支柱：Unix操作系统、MINIX操作系统、GNU计划、POSIX标准和Internet网络。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;20世纪80年代，计算机硬件的性能不断提高，PC的市场不断扩大，当时可供计算机选用的操作系统主要有Unix、DOS和MacOS这几种。Unix价格昂贵，不能运行于PC；DOS显得简陋，且源代码被软件厂商严格保密；MacOS是一种专门用于苹果计算机的操作系统。此时，计算机科学领域迫切需要一个更加完善、强大、廉价和完全开放的操作系统。由于供教学使用的典型操作系统很少，因此当时在荷兰当教授的美国人AndrewS.Tanenbaum编写了一个操作系统，名为MINIX，为了向学生讲述操作系统内部工作原理。MINIX虽然很好，但只是一个用于教学目的的简单操作系统，而不是一个强有力的实用操作系统，然而最大的好处就是公开源代码。全世界学计算机的学生都通过钻研MINIX源代码来了解电脑里运行的MINIX操作系统，芬兰赫尔辛基大学大学二年级的学生Linus Torvalds就是其中一个，在吸收了MINIX精华的基础上，Linus于1991年写出了属于自己的Linux操作系统，版本为Linux0.01，是Linux时代开始的标志。他利用Unix的核心，去除繁杂的核心程序，改写成适用于一般计算机的x86系统，并放在网络上供大家下载，1994年推出完整的核心Version1.0，至此，Linux逐渐成为功能完善、稳定的操作系统，并被广泛使用。&lt;/p&gt;
&lt;p&gt;（引用 ：https://baike.baidu.com/item/Linux）&lt;/p&gt;
&lt;h3 id=&#34;linux之父&#34;&gt;linux之父&lt;/h3&gt;
&lt;p&gt;林纳斯·本纳第克特·托瓦兹——著名的电脑程序员、黑客。Linux内核的发明人及该计划的合作者。托瓦兹利用个人时间及器材创造出了这套当今全球最流行的操作系统（作业系统）内核之一。现受聘于开放源代码开发实验室（OSDL：Open Source Development Labs， Inc），全力开发Linux内核。
&lt;img src=&#34;./img/2.jpg&#34; alt=&#34;&#34;&gt;
托瓦兹1969年12月28日出生于芬兰赫尔辛基市。父亲尼尔斯·托瓦兹（Nils Torvalds）是一名活跃的共产主义者及电台记者，曾当选芬兰共产党中央委员会委员。托瓦兹家族属于在芬兰占6%的少数民族芬兰瑞典人。他毕业于赫尔辛基大学计算机系，1997年至2003年在美国加州硅谷任职于全美达公司（Transmeta Corporation），现受聘于开放源代码开发实验（OSDL：Open Source Development Labs， Inc），全力开发Linux内核。与妻子托芙（Tove，芬兰前女子空手道冠军）育有三个女孩。&lt;/p&gt;
&lt;p&gt;与很多其他黑客不同，托瓦兹行事低调，一般很少评论商业竞争对手（例如微软）产品的好坏，但坚持开放源代码信念，并对微软等对手的FUD战略大为不满。&lt;/p&gt;
&lt;p&gt;例如，在一封回应微软资深副总裁Craig Mundie有关开放源代码运动的评论（Mundie批评开放源代码运动破坏了知识产权）的电子邮件中，托瓦兹写道：“我不知道Mundie是否听说过艾萨克·牛顿（Isaac Newton）爵士？他不仅因为创立了经典物理学（以及他和苹果的故事）而出名，也还因为说过这样一句话而闻名于世：我之所以能够看得更远，是因为我站在巨人肩膀上的缘故。”托瓦兹又说道：“我宁愿听牛顿的也不愿听Mundie的。他（牛顿）虽然死了快300年了，却也没有让房间这样得臭气熏天。”&lt;/p&gt;
&lt;p&gt;现年47岁的林纳斯目前受聘于开放源代码开发实验室（OSDL，Open Source Development Labs），全身心的开发Linux内核。尽管这位年轻人看上去毫不起眼，比如林纳斯曾在他的自传《乐者为王》（Just for Fun）中自嘲：“我是一个长相丑陋的孩子，凡是见过我小时候照片的人，都会觉得我的相貌酷似河狸。再想象一下我不修边幅的衣着，以及一个托瓦兹家族祖祖辈辈遗传下来的大鼻子，这样，在你脑海中我的模样就形成了。”但这丝毫也影响不了林纳斯对整个商业社会的巨大价值—Linux代表着网络时代新形式的开放知识产权形态，这将从根基上颠覆以Windows为代表的封闭式软件产权的传统商业模式。更重要的是，这样的颠覆早已悄悄的出现在了商业社会的各个角落&lt;/p&gt;
&lt;h3 id=&#34;独特见解&#34;&gt;独特见解&lt;/h3&gt;
&lt;p&gt;当在科技行业谈到实现名利的时候，一个有远见的，像史蒂夫·乔布斯一样伟大的人物浮现在我的脑海里，他通常能够设计出令人想不到的产品。但这也不是LinusTorvalds能够成为世界上最知名的程序员的理由（他经常与好莱坞明星在奥斯卡颁奖典礼上上亲密交谈）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当托瓦尔兹还是个大学生，他发明了开源的操作系统Linux，在当今世界的操作系统领域是最具生命力的（包括谷歌和Facebook均采用该操作系统）。世界上最快的超级计算机也采用该系统，同时，也是Android的核心。&lt;/p&gt;
&lt;p&gt;他于1991年发明该操作系统，描述该系统为“开源的操作系统，只是因为爱好，并且不会把它做得很大很专业”。Linux因为它的大和专业在当今世界是如此的重要。这是开源项目的典范，或者任何人都可以做出自己的贡献。自2005年以来，来自1200公司的近12000名程序员把他们的代码添加到主要的Linux操作系统（称为内核）。除了发明了操作系统，托瓦尔兹也发明了一种方，很多人一起工作在一个电脑程序项目。他发明的方法叫做Git，Git本身创建了自己的行业（从Torvalds没有获得任何帮助的情况下），但是如Github，提供给Git价值20亿美元的启动资金。&lt;/p&gt;
&lt;p&gt;托瓦尔兹说，如果他是一个有远见的人，那么这一切就不会发生。当他在一次和来自IEEE的斯蒂芬·卡斯采访中说到（和我们强调）：我相信，为了linux的成功，我不知道我自己究竟做了哪些。当我开始的时候，如果我坚信有一天我能成功，所以到现在我一直在坚持下去。有时候普你需要很多的自信，相信你能做到……&lt;/p&gt;
&lt;p&gt;事实上，我真的不知道它最终什么时候能够实现，意味着我会一直做下去。我可能会听取他人的建议，听取外部的意见，其他人加入该项目，我认为这样更容易，更有趣。有时候人们不需要别人的同意，但可以一直做自己喜欢的事情。&lt;/p&gt;
&lt;p&gt;引用：http://m.elecfans.com/article/633824.html/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在Gitee上部署hugo个人博客</title>
      <link>https://academia-hugo.netlify.com/notes/hugo-study/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/hugo-study/</guid>
      <description>&lt;h2 id=&#34;前提条件&#34;&gt;前提条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建好Gitee账号&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装好git,VCode&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;根据&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;开发文档&lt;/a&gt;建好HUGO站点&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Hugo是一种用 &lt;code&gt;Go语言&lt;/code&gt; 编写的快速，现代化的&lt;code&gt; 静态网站生成器&lt;/code&gt; ，旨在让网站创建再次变得有趣。
Hugo是一个通用的网站框架。从技术上讲，Hugo是静态站点生成器。与根据每个访问者请求动态构建页面的系统不同，Hugo在创建或更新内容时会构建页面。由于浏览网站的频率远远高于编辑网站，因此Hugo旨在为您的网站的最终用户提供最佳的浏览体验，并为网站作者提供理想的写作体验。&lt;/p&gt;
&lt;p&gt;使用Hugo构建的网站非常快速和安全。Hugo站点可以托管在任何地方，包括&lt;code&gt; Netlify&lt;/code&gt; ，&lt;code&gt; Heroku&lt;/code&gt; ，&lt;code&gt; GoDaddy&lt;/code&gt; ，&lt;code&gt; DreamHost&lt;/code&gt; ，&lt;code&gt; GitHub Pages&lt;/code&gt; ，&lt;code&gt; GitLab Pages&lt;/code&gt; ，&lt;code&gt; Surge&lt;/code&gt; ，&lt;code&gt; Aerobatic&lt;/code&gt; ，&lt;code&gt; Firebase&lt;/code&gt; ，&lt;code&gt; Google Cloud Storage&lt;/code&gt; ，&lt;code&gt; Amazon S3，Rackspace&lt;/code&gt; ，&lt;code&gt; Azure&lt;/code&gt; 和&lt;code&gt; CloudFront&lt;/code&gt; ，并且可以与CDN很好地协作。Hugo网站的运行无需数据库或依赖于昂贵的运行时（如Ruby，Python或PHP）。&lt;/p&gt;
&lt;p&gt;我们认为Hugo是理想的网站创建工具，几乎可以立即构建，并且可以在进行更改时立即进行重建。&lt;/p&gt;
&lt;h2 id=&#34;gitee创建项目&#34;&gt;Gitee创建项目&lt;/h2&gt;
&lt;p&gt;注意路径最好跟用户名一致，不然到时候报&lt;code&gt;404&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改baseurl&#34;&gt;修改baseURL&lt;/h2&gt;
&lt;p&gt;修改站点下config.toml文件的baseURL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;baseURL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://你仓库的路径.gitee.io&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;初始化站点&#34;&gt;初始化站点&lt;/h2&gt;
&lt;p&gt;在站点根目录执行&lt;code&gt;hugo --theme=“你主题的名称”&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo --theme&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;academia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行成功后,会在站点下会生成一个public的文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;提交gitee托管&#34;&gt;提交Gitee托管&lt;/h2&gt;
&lt;p&gt;在站点目录下右键git Bash 依次输入如下命令（如果是第一次的话要输入gitee账号的密码）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git pull //如果不行使用: git pull --rebase origin master
git init
git remote rm origin

//改成自己的路径
git remote add origin https://XXX.com/XXXX/XXX.io.git
git add -A
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提交成功后上gitee检查，确保站点已经上传
&lt;img src=&#34;./img/5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;gitee部署&#34;&gt;Gitee部署&lt;/h2&gt;
&lt;p&gt;1.点击 “服务”&amp;ndash;&amp;raquo;&amp;quot;Gitee Pages&amp;rdquo;
&lt;img src=&#34;./img/4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.部署目录输入“public”,勾选“强制使用HTTPS”
&lt;img src=&#34;./img/6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.构建成功后输入链接即可访问
&lt;img src=&#34;./img/7.jpg&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;./img/8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;启动hugo服务器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;hugo主题地址：&lt;a href=&#34;https://themes.gohugo.io//&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>doxker</title>
      <link>https://academia-hugo.netlify.com/notes/docker-study/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://academia-hugo.netlify.com/notes/docker-study/</guid>
      <description>&lt;h3 id=&#34;docker架构&#34;&gt;docker架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://academia-hugo.netlify.com/img/docker/3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker 包括三个基本概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;仓库（Repository）：仓库可看着一个代码控制中心，用来保存镜像。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Docker&lt;/th&gt;
&lt;th&gt;面向对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;容器&lt;/td&gt;
&lt;td&gt;对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;镜像&lt;/td&gt;
&lt;td&gt;类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://academia-hugo.netlify.com/img/docker/4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;概念&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Docker 镜像(Images)&lt;/td&gt;
&lt;td&gt;Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker 容器(Container)&lt;/td&gt;
&lt;td&gt;容器是独立运行的一个或一组应用，是镜像运行时的实体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker 客户端(Client)&lt;/td&gt;
&lt;td&gt;Docker 客户端通过命令行或者其他工具使用 Docker SDK (&lt;a href=&#34;https://docs.docker.com/develop/sdk/&#34;&gt;https://docs.docker.com/develop/sdk/&lt;/a&gt;) 与 Docker 的守护进程通信。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker 主机(Host)&lt;/td&gt;
&lt;td&gt;一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker Registry&lt;/td&gt;
&lt;td&gt;Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(&lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com&lt;/a&gt;) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;strong&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/strong&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 &lt;strong&gt;latest&lt;/strong&gt; 作为默认标签。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker Machine&lt;/td&gt;
&lt;td&gt;Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>
